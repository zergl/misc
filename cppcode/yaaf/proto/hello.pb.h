// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/hello.proto

#ifndef PROTOBUF_proto_2fhello_2eproto__INCLUDED
#define PROTOBUF_proto_2fhello_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fhello_2eproto();
void protobuf_AssignDesc_proto_2fhello_2eproto();
void protobuf_ShutdownFile_proto_2fhello_2eproto();

class DataPkg;

// ===================================================================

class DataPkg : public ::google::protobuf::Message {
 public:
  DataPkg();
  virtual ~DataPkg();

  DataPkg(const DataPkg& from);

  inline DataPkg& operator=(const DataPkg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataPkg& default_instance();

  void Swap(DataPkg* other);

  // implements Message ----------------------------------------------

  DataPkg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataPkg& from);
  void MergeFrom(const DataPkg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type_ = 1;
  inline bool has_type_() const;
  inline void clear_type_();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type_() const;
  inline void set_type_(const ::std::string& value);
  inline void set_type_(const char* value);
  inline void set_type_(const char* value, size_t size);
  inline ::std::string* mutable_type_();
  inline ::std::string* release_type_();
  inline void set_allocated_type_(::std::string* type_);

  // required bytes data_ = 2;
  inline bool has_data_() const;
  inline void clear_data_();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data_() const;
  inline void set_data_(const ::std::string& value);
  inline void set_data_(const char* value);
  inline void set_data_(const void* value, size_t size);
  inline ::std::string* mutable_data_();
  inline ::std::string* release_data_();
  inline void set_allocated_data_(::std::string* data_);

  // @@protoc_insertion_point(class_scope:helloworld.DataPkg)
 private:
  inline void set_has_type_();
  inline void clear_has_type_();
  inline void set_has_data_();
  inline void clear_has_data_();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type__;
  ::std::string* data__;
  friend void  protobuf_AddDesc_proto_2fhello_2eproto();
  friend void protobuf_AssignDesc_proto_2fhello_2eproto();
  friend void protobuf_ShutdownFile_proto_2fhello_2eproto();

  void InitAsDefaultInstance();
  static DataPkg* default_instance_;
};
// ===================================================================


// ===================================================================

// DataPkg

// required string type_ = 1;
inline bool DataPkg::has_type_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataPkg::set_has_type_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataPkg::clear_has_type_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataPkg::clear_type_() {
  if (type__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type__->clear();
  }
  clear_has_type_();
}
inline const ::std::string& DataPkg::type_() const {
  // @@protoc_insertion_point(field_get:helloworld.DataPkg.type_)
  return *type__;
}
inline void DataPkg::set_type_(const ::std::string& value) {
  set_has_type_();
  if (type__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type__ = new ::std::string;
  }
  type__->assign(value);
  // @@protoc_insertion_point(field_set:helloworld.DataPkg.type_)
}
inline void DataPkg::set_type_(const char* value) {
  set_has_type_();
  if (type__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type__ = new ::std::string;
  }
  type__->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.DataPkg.type_)
}
inline void DataPkg::set_type_(const char* value, size_t size) {
  set_has_type_();
  if (type__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type__ = new ::std::string;
  }
  type__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.DataPkg.type_)
}
inline ::std::string* DataPkg::mutable_type_() {
  set_has_type_();
  if (type__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:helloworld.DataPkg.type_)
  return type__;
}
inline ::std::string* DataPkg::release_type_() {
  clear_has_type_();
  if (type__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type__;
    type__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataPkg::set_allocated_type_(::std::string* type_) {
  if (type__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type__;
  }
  if (type_) {
    set_has_type_();
    type__ = type_;
  } else {
    clear_has_type_();
    type__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:helloworld.DataPkg.type_)
}

// required bytes data_ = 2;
inline bool DataPkg::has_data_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataPkg::set_has_data_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataPkg::clear_has_data_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataPkg::clear_data_() {
  if (data__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data__->clear();
  }
  clear_has_data_();
}
inline const ::std::string& DataPkg::data_() const {
  // @@protoc_insertion_point(field_get:helloworld.DataPkg.data_)
  return *data__;
}
inline void DataPkg::set_data_(const ::std::string& value) {
  set_has_data_();
  if (data__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data__ = new ::std::string;
  }
  data__->assign(value);
  // @@protoc_insertion_point(field_set:helloworld.DataPkg.data_)
}
inline void DataPkg::set_data_(const char* value) {
  set_has_data_();
  if (data__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data__ = new ::std::string;
  }
  data__->assign(value);
  // @@protoc_insertion_point(field_set_char:helloworld.DataPkg.data_)
}
inline void DataPkg::set_data_(const void* value, size_t size) {
  set_has_data_();
  if (data__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data__ = new ::std::string;
  }
  data__->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:helloworld.DataPkg.data_)
}
inline ::std::string* DataPkg::mutable_data_() {
  set_has_data_();
  if (data__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data__ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:helloworld.DataPkg.data_)
  return data__;
}
inline ::std::string* DataPkg::release_data_() {
  clear_has_data_();
  if (data__ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data__;
    data__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DataPkg::set_allocated_data_(::std::string* data_) {
  if (data__ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data__;
  }
  if (data_) {
    set_has_data_();
    data__ = data_;
  } else {
    clear_has_data_();
    data__ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:helloworld.DataPkg.data_)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fhello_2eproto__INCLUDED
